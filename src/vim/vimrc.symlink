" Load pathogen
call pathogen#infect()

""
"" Basic Setup
""
set nocompatible      " Use vim, no vi defaults
set number            " Show line numbers
set ruler             " Show line and column number
syntax enable         " Turn on syntax highlighting allowing local overrides

""
"" Whitespace
""
set nowrap                        " don't wrap lines
set tabstop=4                     " a tab is two spaces
set shiftwidth=4                  " an autoindent (with <<) is two spaces
set expandtab                     " use spaces, not tabs
set list                          " Show invisible characters
set backspace=indent,eol,start    " backspace through everything in insert mode
set encoding=utf-8    " Set default encoding to UTF-8

" List chars
set listchars=""                  " Reset the listchars
set listchars=tab:\ \             " a tab should display as "  ", trailing whitespace as "."
set listchars+=trail:.            " show trailing spaces as dots
set listchars+=extends:>          " The character to show in the last column when wrap is
                                  " off and the line continues beyond the right of the screen
set listchars+=precedes:<         " The character to show in the last column when wrap is

au BufNewFile,BufReadPost *.h setl shiftwidth=4 expandtab
au BufNewFile,BufReadPost *.c setl shiftwidth=4 expandtab
au BufNewFile,BufReadPost *.cc setl shiftwidth=4 expandtab
au BufNewFile,BufReadPost *.cpp setl shiftwidth=4 expandtab

au BufNewFile,BufReadPost *.js setl shiftwidth=2 expandtab
au BufNewFile,BufReadPost *.coffee setl shiftwidth=2 expandtab
au BufNewFile,BufReadPost *.jade setl shiftwidth=2 expandtab
au BufNewFile,BufReadPost *.html setl shiftwidth=2 expandtab
au BufNewFile,BufReadPost *.less setl filetype=less
au BufNewFile,BufReadPost *.less setl shiftwidth=2 expandtab
au BufNewFile,BufReadPost *.rb setl shiftwidth=2 expandtab

au FileType make set noexpandtab

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*


"""
" Custom filetypes, text and markup wrapping
"""
function s:setupWrapping()
  set wrap
  set wrapmargin=2
  set textwidth=72
endfunction

function s:setupMarkup()
  call s:setupWrapping()
  map <buffer> <Leader>p :Hammer<CR>
endfunction
                                  " off and the line continues beyond the right of the screen

""
"" Searching
""
set hlsearch    " highlight matches
set incsearch   " incremental searching
set ignorecase  " searches are case insensitive...
set smartcase   " ... unless they contain at least one capital letter

"""
""" Statusline Settings
"""
if has("statusline") && !&cp
  set laststatus=2  " always show the status bar

  " Start the status line
  set statusline=%f\ %m\ %r
  set statusline+=Line:%l/%L[%p%%]
  set statusline+=Col:%v
  set statusline+=Buf:#%n
  set statusline+=[%b][0x%B]
endif

""
"" Wild settings
""
" Disable output and VCS files
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem

" Disable archive files
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz

" Ignore bundler and sass cache
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*

" Disable temp and backup files
set wildignore+=*.swp,*~,._*

""
"" Backup and swap files
""
set backupdir=~/.vim/_backup//    " where to put backup files.
set directory=~/.vim/_temp//      " where to put swap files.


"""
""" Other Settings
"""
let mapleader = ";"

" enables filetype specific actions
filetype on
filetype plugin on
filetype plugin indent on

" Enable syntax highlighting
syntax on

" Toggle spell checking
map <Leader>h :set spell<CR>
map <Leader>g :set nospell<CR>

" Turn off folding (defaults to ON for pymode)
let g:pymode_folding = 0

" use :w!! to write to a file using sudo if you forgot to 'sudo vim file'
" " (it will prompt for sudo password when writing)
cmap w!! %!sudo tee > /dev/null %

" set text wrapping toggles
nmap <silent> <leader>tw :set invwrap<CR>:set wrap?<CR>

" find merge conflict markers
nmap <silent> <leader>fc <ESC>/\v^[<=>]{7}( .*\|$)<CR>


"""
" Shortcuts
"""
nnoremap <silent> <Leader>p :set invpaste paste?<CR>
nnoremap <silent> <Leader>s :set nolist!<CR>:set nonumber!<CR>:set foldcolumn=0<CR>:set invpaste paste?<CR>

map <S-Tab> :tabp <CR>
map <C-Tab> :tabn <CR>
map <C-Left> :winc W<CR>
map <C-Right> :winc w<CR>
map <C-n><C-n> :set nonumber!<CR>:set foldcolumn=0<CR>

"""
" Emacs/bash style shortcuts
"""
map <C-a> <Home>
map <C-e> <End>
nmap <C-k> <S-c>

" GUI settings
if has("gui_macvim") && has("gui_running")
  " Map command-[ and command-] to indenting or outdenting
  " while keeping the original selection in visual mode
  vmap <D-]> >gv
  vmap <D-[> <gv

  nmap <D-]> >>
  nmap <D-[> <<

  omap <D-]> >>
  omap <D-[> <<

  imap <D-]> <Esc>>>i
  imap <D-[> <Esc><<i

  " Bubble single lines
  nmap <D-Up> [e
  nmap <D-Down> ]e
  nmap <D-k> [e
  nmap <D-j> ]e

  " Bubble multiple lines
  vmap <D-Up> [egv
  vmap <D-Down> ]egv
  vmap <D-k> [egv
  vmap <D-j> ]egv

  " Make shift-insert work like in Xterm
  map <S-Insert> <MiddleMouse>
  map! <S-Insert> <MiddleMouse>
endif

"""
""" NERDTree
"""
"let NERDTreeMapActivateNode="<CR>"
let NERDTreeShowHidden=0
let NERDTreeMapActivateNode="<space>"
let NERDTreeIgnore=['\.pyc$', '\.rbc$', '\~$']
map <Leader>n :NERDTreeToggle<CR>
nmap <silent> <D-d> :NERDTreeToggle<CR>
nnoremap <silent> <Leader><space> :NERDTreeToggle<CR>
nmap <silent> <D-D> :NERDTree<CR>

"""
""" Markdown
"""
"nnoremap <leader>m :silent !open -a Marked.app '%:p'<cr>
nnoremap <leader>m :silent !open -a MultiMarkdown\ Composer\ -\ v2.app '%:p'<cr>

"""
""" HTML/XML
"""
au Filetype html,xml,xsl source ~/.vim/scripts/closetag.vim


"""
""" Temp Modifications
"""
set t_Co=256
colorscheme zenburn

"""
" Tab completion
"""
 function! SuperCleverTab()
    if strpart(getline('.'), 0, col('.') - 1) =~ '^\s*$'
        return "\<Tab>"
    else
        if &omnifunc != ''
            return "\<C-X>\<C-O>"
        elseif &dictionary != ''
            return "\<C-K>"
        else
            return "\<C-N>"
        endif
    endif
endfunction

inoremap <Tab> <C-R>=SuperCleverTab()<cr>
